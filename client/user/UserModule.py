#!/usr/bin/python
# -*- coding: utf-8 -*-
'''generated by Luji Cui on 2011.11.10;
user main interface to communicate with user's operation.'''

import wx,sys
from twisted.internet import reactor,defer,threads
import wx.html
from SecFrame import ChildFrame
from InfoFrame import IntroductionFrame
import wx.gizmos
#from Remind import RemindFrame
from Dialog import TipFrame
from option.OptionModule import OptionFrame
from CFriend import FriendCourse

reload(sys)
sys.setdefaultencoding('utf-8')

'''class MySheet(wx.grid.Grid):
	def __init__(self, parent):
		wx.grid.Grid.__init__(self,parent, -1)
		self.data = (("Mathematics", "Chinese", "English", " ", " ", " ", " "),
			("Physics", "Chemistry", "Biology", " ", " ", " ", " "),
			(" ", " ", " ", " ", " ", " ", " "),
			(" ", " ", " ", " ", " ", " ", " "),
			(" ", " ", " ", " ", " ", " ", " "))
		self.colLabels = ["星期一", "星期二", "星期三", "星期四", "星期五", "星期六", "星期日"]
		self.rowLabels = ["12", "34", "56", "78", "90"]
		self.CreateGrid(5,7)
		for row in range(5):
			self.SetRowLabelValue(row,self.rowLabels[row])
			self.SetRowSize(row,45)
		for col in range(7):
			self.SetColLabelValue(col,self.colLabels[col])
			self.SetColSize(col,105)
		for row in range(5):
			for col in range(7):
				self.SetCellValue(row,col,"%s" %self.data[row][col])
				self.SetReadOnly(row,col,isReadOnly=True)'''

#class:list the classified news to choose
class MyopDialog(wx.Dialog):
	def __init__(self, parent, id, title):
		wx.Dialog.__init__(self, parent, id, title)
		vbox = wx.BoxSizer(wx.VERTICAL)
    #add dialog widgets
		stline = wx.StaticText(self,11,"请选择你想获得的动态信息：")
		vbox.Add(stline, 2, wx.ALIGN_CENTER|wx.TOP, 45)
		self.cb1 = wx.CheckBox(self,-1,"选课系统公告",(100,60),(150,20))
		self.cb2 = wx.CheckBox(self,-1,"学院新闻",(100,80),(150,20))
		self.cb3 = wx.CheckBox(self,-1,"教务处新闻",(100,100),(150,20))
		self.cb1.SetValue(self.protocol.options[0])
		self.cb2.SetValue(self.protocol.options[1])
		self.cb3.SetValue(self.protocol.options[2])
		vbox.Add(self.cb1, 1, wx.ALIGN_CENTER, 25)
		vbox.Add(self.cb2, 1, wx.ALIGN_CENTER, 25)
		vbox.Add(self.cb3, 1, wx.ALIGN_CENTER, 25)
		sizer = self.CreateButtonSizer(wx.NO|wx.YES)
    #dialog layout
		vbox.Add(sizer, 2, wx.ALIGN_CENTER)
		self.SetSizer(vbox)
		self.Bind(wx.EVT_BUTTON, self.OnYes, id=wx.ID_YES)
		self.Bind(wx.EVT_BUTTON, self.OnCancel, id=wx.ID_NO)
		self.Center()
    #end

#trigger event:save user's choice and close this dialog
	def OnYes(self, event):
		self.c1 = self.cb1.GetValue()
		self.c2 = self.cb2.GetValue()
		self.c3 = self.cb3.GetValue()
		self.Close()
#end

#trigger event:close this dialog
	def OnCancel(self, event):
		self.Close()
#end
#end MyopDialog

#class:the search dialog to find the friend which user want to add
class MyDialog(wx.Dialog):
	def __init__(self, parent, id, title):
		wx.Dialog.__init__(self, parent, id, title)
		vbox = wx.BoxSizer(wx.VERTICAL)
		sizer1 = wx.BoxSizer(wx.HORIZONTAL)
    #add dialog widgets
		self.ls = wx.ListCtrl(self, -1, style=wx.LC_REPORT)
		self.ls.InsertColumn(0, u"年级")
		self.ls.InsertColumn(1, u"姓名")
		self.ls.InsertColumn(2, u"专业")
		self.ls.InsertColumn(3, u"学号")
		self.ls.SetColumnWidth(0, 100)
		self.ls.SetColumnWidth(1, 100)
		self.ls.SetColumnWidth(2, 200)
		self.ls.SetColumnWidth(3, 0)
		self.num_items=0
		self.okButton = wx.Button(self,wx.ID_OK,"OK")
		self.cancelButton = wx.Button(self,wx.ID_CANCEL,"Cancel")
    #end
    #dialog layout
		vbox.Add(self.ls, 1, wx.EXPAND, 0)
		sizer1.Add(self.okButton, 1, wx.EXPAND,0)
		sizer1.Add(self.cancelButton, 1, wx.EXPAND,0)
		vbox.Add(sizer1, 0, wx.ALIGN_CENTER, 0)
		self.SetSizer(vbox)
		self.Center()
    #end

#function:init the listctrl information
	def lsInit(self,element):
		self.ls.InsertStringItem(self.num_items, element[0])
		self.ls.SetStringItem(self.num_items, 1, element[1])
		self.ls.SetStringItem(self.num_items, 2, element[2])
		self.ls.SetStringItem(self.num_items, 3, element[3])
		self.num_items=self.num_items+1
#end
#end MyDialog

#class:list the information about people who want to add the user as friend
class ApplyDialog(wx.Dialog):
	def __init__(self, parent, id, title, info):
		wx.Dialog.__init__(self, parent, id, title,size=(400,200))
		vbox = wx.BoxSizer(wx.VERTICAL)
		hbox = wx.BoxSizer(wx.HORIZONTAL)
		stline = wx.StaticText(self, 11, info)
		vbox.Add(stline, 1, wx.ALIGN_CENTER|wx.TOP, 45)
		self.AgreeButton = wx.Button(self,wx.ID_OK,"同意")
		self.DisagreeButton = wx.Button(self,wx.ID_NO,"不同意")
		hbox.Add(self.AgreeButton, 1, wx.EXPAND, 0)
		hbox.Add(self.DisagreeButton, 1, wx.EXPAND, 0)	
		vbox.Add(hbox, 0, wx.ALIGN_CENTER)
		self.SetSizer(vbox)
#end ApplyDialog

#class:create the system taskbar icon
class TaskBarIcon(wx.TaskBarIcon):
	ID_Bar = wx.NewId()
	def __init__(self, frame):
		wx.TaskBarIcon.__init__(self)
		self.frame = frame
		self.SetIcon(wx.Icon(name='images/Taskbar.png', type=wx.BITMAP_TYPE_PNG), 'User')
		self.Bind(wx.EVT_TASKBAR_LEFT_DOWN, self.OnLeftDown)
		self.Bind(wx.EVT_TASKBAR_RIGHT_DOWN, self.OnRightDown)

#trigger event:respond to mouse left click of the taskbar icon,show or hide the user interface 
	def OnLeftDown(self, event):
		if self.frame.IsIconized() or not self.frame.IsShown():
			self.frame.Iconize(False)
			self.frame.Raise()
		else:
			self.frame.Show(False)
#end

#trigger event:respond to mouse right click of taskbar icon,show the taskbar menu
	def OnRightDown(self, event):
		if not hasattr(self, "popupID1"):
			self.popupID1 = wx.NewId()
			self.popupID2 = wx.NewId()
			self.Bind(wx.EVT_MENU, self.OnPopupOne, id=self.popupID1)
			self.Bind(wx.EVT_MENU, self.OnPopupTwo, id=self.popupID2)
		menu = wx.Menu()
		menu.Append(self.popupID1, "Exit")
		menu.Append(self.popupID2, "About Me")
		self.PopupMenu(menu)
		menu.Destroy()
#end

#taskbar menu trigger event:respond to the 'Exit' choice,exit the application.
	def OnPopupOne(self, event):
		dlg = wx.MessageDialog(None,'Do you really wanna exit the Application?','Message Box',wx.YES_NO | wx.ICON_QUESTION)
		retCode = dlg.ShowModal()
		if retCode == wx.ID_YES:
			self.RemoveIcon()
			self.frame.Destroy()
		else:
			pass
		dlg.Destroy()
#end

#taskbar menu trigger event:respond to the'About me' choice,show the introduction of this application.
	def OnPopupTwo(self, event):
		info = IntroductionFrame(self.frame, -1, 'About Me')
		info.ShowModal()
		info.Destroy()
#end
#end TaskBarIcon

#class:user main interface,devided into three parts as module News,Course and friend. 
class MyFrame(wx.Frame):
	def __init__(self, parent, id, protocol):# MyFrame.__init__
        	wx.Frame.__init__(self, parent, -1,'UserInterface',size=(900,650),style=wx.DEFAULT_FRAME_STYLE ^ (wx.RESIZE_BORDER))
		self.frstatusbar = self.CreateStatusBar(1)
		self.item = 0
		self.flag = 0
		self.flag3 = 0
		self.count = 0
    #add user main interface widgets
		il = wx.ImageList(24,24)
		self.icon1 = il.Add(wx.ArtProvider.GetBitmap(wx.ART_HELP_PAGE,wx.ART_OTHER,(24,24)))
		self.icon2 = il.Add(wx.ArtProvider.GetBitmap(wx.ART_GO_HOME,wx.ART_OTHER,(24,24)))
		self.icon3 = il.Add(wx.ArtProvider.GetBitmap(wx.ART_HELP_SETTINGS,wx.ART_OTHER,(24,24)))
		self.num_items=0#好友
#hjk,初始化协议protocol
		self.protocol=protocol
		self.protocol.factory.ufgui=self             
#end
		self.notebook_1 = wx.Notebook(self, -1, style=wx.DOUBLE_BORDER)
		self.notebook_1_pane_1 = wx.Panel(self.notebook_1, -1)
		self.notebook_1_pane_2 = wx.Panel(self.notebook_1, -1)
		self.notebook_1_pane_3 = wx.Panel(self.notebook_1, -1)
		name = self.protocol.name
		ID = self.protocol.number
		self.pindex = 1
		self.pcount = 3
		self.pindex1 = 1
		self.pcount1 = 3
		self.pindex2 = 1
		self.pcount2 = 3
#		self.pindex3 = 1
#		self.pcount3= 3
    #the first notebook:News module
		self.BButton = wx.Button(self.notebook_1_pane_1, 2,"退出")
		self.name = wx.StaticText(self.notebook_1_pane_1, -1, u"姓名：")
		self.ID = wx.StaticText(self.notebook_1_pane_1, -1, u"学号：")
#hjk  显示姓名和学号
		self.NAtext = wx.StaticText(self.notebook_1_pane_1, -1, self.protocol.name)
		self.IDtext = wx.StaticText(self.notebook_1_pane_1, -1, self.protocol.number)
#end
		self.UndefineButton = wx.StaticBitmap(self.notebook_1_pane_1, -1, wx.Bitmap("images/processing.png", wx.BITMAP_TYPE_ANY))
		self.OButton = wx.Button(self.notebook_1_pane_1, 6, u"设置")
		self.newstree = wx.gizmos.TreeListCtrl(self.notebook_1_pane_1, 2, style=wx.TR_HAS_BUTTONS|wx.TR_DEFAULT_STYLE|wx.TR_ROW_LINES|wx.TR_HIDE_ROOT|wx.SUNKEN_BORDER)
		self.newstree.AssignImageList(il)
		self.newstree1 = wx.gizmos.TreeListCtrl(self.notebook_1_pane_1, 3, style=wx.TR_HAS_BUTTONS|wx.TR_DEFAULT_STYLE|wx.TR_ROW_LINES|wx.TR_HIDE_ROOT|wx.SUNKEN_BORDER)
		self.newstree1.AssignImageList(il)
		self.newstree2 = wx.gizmos.TreeListCtrl(self.notebook_1_pane_1, 4, style=wx.TR_HAS_BUTTONS|wx.TR_DEFAULT_STYLE|wx.TR_ROW_LINES|wx.TR_HIDE_ROOT|wx.SUNKEN_BORDER)
		self.newstree2.AssignImageList(il)
		self.prepage = wx.Button(self.notebook_1_pane_1, 8, u"前一页")
		self.nextpage = wx.Button(self.notebook_1_pane_1, 9, u"后一页")
		self.pt=wx.StaticText(self.notebook_1_pane_1,-1,"/")
		self.lblPageIndex=wx.StaticText(self.notebook_1_pane_1,-1,str(self.pindex))
		self.lblPageCount=wx.StaticText(self.notebook_1_pane_1,-1,str(self.pcount))
		self.prepage1 = wx.Button(self.notebook_1_pane_1, 10, u"前一页")
		self.nextpage1 = wx.Button(self.notebook_1_pane_1, 11, u"后一页")
		self.pt1=wx.StaticText(self.notebook_1_pane_1,-1,"/")
		self.lblPageIndex1=wx.StaticText(self.notebook_1_pane_1,-1,str(self.pindex1))
		self.lblPageCount1=wx.StaticText(self.notebook_1_pane_1,-1,str(self.pcount1))
		self.lblPageIndex2=wx.StaticText(self.notebook_1_pane_1,-1,str(self.pindex2))		
		self.lblPageCount2=wx.StaticText(self.notebook_1_pane_1,-1,str(self.pcount2))
		#jwc
		self.prepage2 = wx.Button(self.notebook_1_pane_1, 12, u"前一页")
		self.nextpage2 = wx.Button(self.notebook_1_pane_1, 13, u"后一页")
		self.pt2=wx.StaticText(self.notebook_1_pane_1,-1,"/")
#		self.prepage3 = wx.Button(self.notebook_1_pane_1, 14, u"前一页")
#		self.nextpage3 = wx.Button(self.notebook_1_pane_1, 15, u"后一页")
#		self.pt3=wx.StaticText(self.notebook_1_pane_1,-1,"/")
#		self.lblPageIndex3=wx.StaticText(self.notebook_1_pane_1,-1,str(self.pindex3))
#		self.lblPageCount3=wx.StaticText(self.notebook_1_pane_1,-1,str(self.pcount3))
		self.process = wx.StaticText(self.notebook_1_pane_1, -1, u"开发中……")
		self.Aufac = ['海洋环境学院','海洋生命学院','食品科学与工程学院','工程学院','管理学院','外语学院','水产学院','医药学院','环境科学与工程学院','经济学院','文新学院','数学学院','基础教学中心','艺术系']
		self.Facselect = wx.ComboBox(self.notebook_1_pane_1,15 ,choices=self.Aufac,style=wx.CB_READONLY)
		self.Facselect.SetSelection(0)
    #end

    #the second notebook:Course module 
		self.BButton2 = wx.Button(self.notebook_1_pane_2, 3, u"退出")
		self.text = wx.StaticText(self.notebook_1_pane_2, -1, '')
		self.authors = []
		self.semester = wx.ComboBox(self.notebook_1_pane_2,14 ,choices=self.authors,style=wx.CB_READONLY)
		self.MECtrl = wx.StaticText(self.notebook_1_pane_2, -1, u"选择您所需要显示的学期：")
		self.coursetable = wx.html.HtmlWindow(self.notebook_1_pane_2)
		if "gtk2" in wx.PlatformInfo:
			self.coursetable.SetStandardFonts()
#		self.coursetable.SetPage(
#			"Here is some <b>formatted</b> <i><u>text</u></i> "
#			"loaded from a <font color=\"red\">string</font>.")
		self.courselist = wx.html.HtmlWindow(self.notebook_1_pane_2)
		if "gtk2" in wx.PlatformInfo:
			self.courselist.SetStandardFonts()
#		self.courselist.SetPage(
#			"Here is some <b>formatted</b> <i><u>text</u></i> "
#			"loaded from a <font color=\"red\">string</font>.")
    #end

    #the third notebook:Friend module
		self.window_1 = wx.SplitterWindow(self.notebook_1_pane_3, -1, style=wx.SP_3D|wx.SP_BORDER)
		self.window_1_pane_2 = wx.Panel(self.window_1, -1)
		self.window_1_pane_1 = wx.Panel(self.window_1, -1)
		self.BButton3 = wx.Button(self.window_1_pane_1, 4, u"退出")
		self.AddFrd = wx.Button(self.window_1_pane_1, 5, u"添加好友")
		self.searchicon = wx.BitmapButton(self.window_1_pane_1, -1, wx.Bitmap("images/search.png", wx.BITMAP_TYPE_ANY))
		self.searchCtrl = wx.TextCtrl(self.window_1_pane_1, -1, "", style=wx.TE_PROCESS_ENTER)
		self.lc = wx.ListCtrl(self.window_1_pane_1, -1,style=wx.LC_REPORT|wx.SUNKEN_BORDER)
		self.TXtext = wx.StaticText(self.window_1_pane_1, -1, u"  好友申请提醒")
		self.TXButton = wx.Button(self.window_1_pane_1, 1, '')
		self.TJtext = wx.StaticText(self.window_1_pane_2, -1, u"	课程学习统计")
		self.Refreshdata = wx.Button(self.window_1_pane_2, 7, u"刷新数据")
		self.tree = wx.TreeCtrl(self.window_1_pane_2, 1, style=wx.TR_HAS_BUTTONS|wx.TR_DEFAULT_STYLE|wx.SUNKEN_BORDER)
		self.display = wx.ListCtrl(self.window_1_pane_2, -1, style=wx.LC_REPORT)
    #end
		self.op = OptionFrame(self.protocol)
		self.protocol.factory.opgui=self.op
		self.protocol.setOption()
		self.op.rb.Hide()		
		self.__set_properties()
		self.__do_layout()
    #end

    #bind the button click event with corresponding function 
		self.Bind(wx.EVT_CLOSE,self.OnCloseWindow)
		self.Bind(wx.EVT_ICONIZE, self.Iconify)
		self.Bind(wx.EVT_BUTTON, self.OnExit, id=2)
		self.Bind(wx.EVT_BUTTON, self.OnExit, id=3)
		self.Bind(wx.EVT_BUTTON, self.OnExit, id=4)
		self.Bind(wx.EVT_BUTTON, self.goSearch, self.searchicon)
		self.Bind(wx.EVT_BUTTON, self.OnOption, id=6)
		self.Bind(wx.EVT_BUTTON, self.PPage, id=8)
		self.Bind(wx.EVT_BUTTON, self.NPage, id=9)
		self.Bind(wx.EVT_BUTTON, self.PPage1, id=10)
		self.Bind(wx.EVT_BUTTON, self.NPage1, id=11)
		#jwc
		self.Bind(wx.EVT_BUTTON, self.PPage2, id=12)
		self.Bind(wx.EVT_BUTTON, self.NPage2, id=13)
#		self.Bind(wx.EVT_BUTTON, self.PPage3, id=14)
#		self.Bind(wx.EVT_BUTTON, self.NPage3, id=15)
		self.Bind(wx.EVT_COMBOBOX, self.OnView, id=14)
		self.Bind(wx.EVT_COMBOBOX, self.FacChange, id=15)
		self.Bind(wx.EVT_BUTTON, self.AddFriend, self.AddFrd)
		self.Bind(wx.EVT_BUTTON, self.OnRemind, id=1)
		self.Bind(wx.EVT_TEXT_ENTER, self.goSearch, self.searchCtrl)
		self.Bind(wx.EVT_BUTTON, self.Refresh, self.Refreshdata)
		self.lc.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.OnContextMenu)
		self.newstree.Bind(wx.EVT_TREE_ITEM_ACTIVATED, self.OnChanged, id=2)
		self.newstree1.Bind(wx.EVT_TREE_ITEM_ACTIVATED, self.OnChanged, id=3)
		self.newstree2.Bind(wx.EVT_TREE_ITEM_ACTIVATED, self.OnChanged, id=4)
		self.tree.Bind(wx.EVT_TREE_SEL_CHANGED, self.OnSelChanged, id=1)
    #end
		self.taskBarIcon = TaskBarIcon(self)
		self.Center()
# end of MyFrame.__init__

# MyFrame.__set_properties
	def __set_properties(self):
		self.SetTitle("UserFrame")
		self.frstatusbar.SetStatusWidths([-1])
		frstatusbar_fields = ["UserFramestatusbar"]
		for i in range(len(frstatusbar_fields)):
			self.frstatusbar.SetStatusText(frstatusbar_fields[i], i)
    #the properties of News module
		self.notebook_1.SetFont(wx.Font(16, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Ubuntu"))
		self.BButton.SetSize(self.BButton.GetBestSize())
		self.name.SetFont(wx.Font(16, wx.ROMAN, wx.NORMAL,wx.NORMAL, 0, ""))
		self.NAtext.SetFont(wx.Font(16, wx.ROMAN, wx.NORMAL,wx.NORMAL, 0, ""))
		self.ID.SetFont(wx.Font(16, wx.ROMAN, wx.NORMAL,wx.NORMAL, 0, ""))
		self.IDtext.SetFont(wx.Font(16, wx.ROMAN, wx.NORMAL,wx.NORMAL, 0, ""))
		self.TXtext.SetFont(wx.Font(20, wx.ROMAN, wx.NORMAL,wx.NORMAL, 0, ""))
		self.process.SetFont(wx.Font(20, wx.ROMAN, wx.NORMAL,wx.NORMAL, 0, ""))

		self.OButton.SetDefault()
		self.UndefineButton.SetSize(self.UndefineButton.GetBestSize())
		self.newstree.AddColumn("新闻链接")
		self.newstree.AddColumn("Id")
		self.newstree.SetMainColumn(0)
		self.newstree.SetColumnWidth(0,430)
		self.newstree.SetColumnWidth(1,0)
		root0 = self.newstree.AddRoot('1')
		self.newstree.SetItemText(root0,'0', 1)
		self.xk0 = self.newstree.AppendItem(root0, '选课系统')
		self.newstree.SetItemText(self.xk0, '1', 1)
		self.newstree.SetItemImage(self.xk0,self.icon1,wx.TreeItemIcon_Normal)
		self.newstree1.AddColumn("新闻链接")
		self.newstree1.AddColumn("Id")
		self.newstree1.SetMainColumn(0)
		self.newstree1.SetColumnWidth(0,430)
		self.newstree1.SetColumnWidth(1,0)
		root1 = self.newstree1.AddRoot('1')
		self.newstree1.SetItemText(root1,'0', 1)
		self.fac0 = self.newstree1.AppendItem(root1, '院系新闻')
		self.newstree1.SetItemText(self.fac0, '2', 1)
		self.newstree1.SetItemImage(self.fac0,self.icon2,wx.TreeItemIcon_Normal)
		self.newstree2.AddColumn("新闻链接")
		self.newstree2.AddColumn("Id")
		self.newstree2.SetMainColumn(0)
		self.newstree2.SetColumnWidth(0,430)
		self.newstree2.SetColumnWidth(1,0)
		root2 = self.newstree2.AddRoot('1')
		self.newstree2.SetItemText(root2,'0', 1)
		self.jwc0 = self.newstree2.AppendItem(root2, '教务处')
		self.newstree2.SetItemText(self.jwc0, '3', 1)
		self.newstree2.SetItemImage(self.jwc0,self.icon3,wx.TreeItemIcon_Normal)
    #end
#hjk
		self.RefreshModule()
		self.prepage.Enable(False)
		self.prepage1.Enable(False)
		self.prepage2.Enable(False)
		if self.pcount != 1:
			self.nextpage.Enable(True)
		else:
			self.nextpage.Enable(False)
		if self.pcount1 != 1:
			self.nextpage1.Enable(True)
		else:
			self.nextpage1.Enable(False)
		if self.pcount2 != 1:
			self.nextpage2.Enable(True)
		else:
			self.nextpage2.Enable(False)
#end
    #the properties of Friend module
		self.lc.InsertColumn(0,u"ID")
		self.lc.InsertColumn(1, u"年级")
		self.lc.InsertColumn(2, u"姓名")
		self.lc.InsertColumn(3, u"专业")
		self.lc.SetColumnWidth(0,0)
		self.lc.SetColumnWidth(1,100)
		self.lc.SetColumnWidth(2,100)
		self.lc.SetColumnWidth(3,300)
		root = self.tree.AddRoot('课程')
		self.pro = self.tree.AppendItem(root, '专业课')
		com = self.tree.AppendItem(root, '必修课')
		ele = self.tree.AppendItem(root, '选修课')
		self.tree.AppendItem(self.pro, 'Linux')
		self.tree.AppendItem(self.pro, 'FreeBSD')
		self.tree.AppendItem(self.pro, 'OpenBSD')
		self.tree.AppendItem(com, 'Java')
		self.tree.AppendItem(com, 'C++')
		self.tree.AppendItem(com, 'C')
		self.tree.AppendItem(ele, 'Qt')
		self.tree.AppendItem(ele, 'MFC')
		self.tree.AppendItem(ele, 'wxPython')
		self.tree.ExpandAll()
		self.searchicon.SetToolTipString("Search")
		self.TJtext.SetFont(wx.Font(20, wx.ROMAN, wx.NORMAL,wx.NORMAL, 0, ""))
		self.display.InsertColumn(1, u"课程名称")
		self.display.InsertColumn(1, u"选课学期")
		self.display.InsertColumn(2, u"密集度")
		self.display.SetColumnWidth(0,150)
		self.display.SetColumnWidth(1,150)
		self.display.SetColumnWidth(1,150)
		self.TXButton.SetLabel(str(self.count))
    #end
# end of MyFrame.__set_properties
	
#function:init and refresh the News module    
	def RefreshModule(self):
#hjk
#刷新模块显示，考虑到别处要调用此部分，所以将其单独写为一个函数
#respond==>self.protocol.options,我把图标是否显示的序列放在协议里的options变量里，以后只需调用self.protocol.options即可
		self.prepage.Enable(self.protocol.options[0])
		self.nextpage.Enable(self.protocol.options[0])	
		self.prepage1.Enable(self.protocol.options[1])
		self.nextpage1.Enable(self.protocol.options[1])
		self.prepage2.Enable(self.protocol.options[2])
		self.nextpage2.Enable(self.protocol.options[2])
		if self.protocol.options[0]==False:
			self.newstree.CollapseAndReset(self.xk0)
			self.pindex = 1
		else:
			if self.pindex == 1:
				self.prepage.Enable(False)

		if self.protocol.options[1]==False:
			self.newstree1.CollapseAndReset(self.fac0)
			self.pindex1 = 1
		else:
			if self.pindex1 == 1:
				self.prepage1.Enable(False)

		if self.protocol.options[2]==False:
			self.newstree2.CollapseAndReset(self.jwc0)
			self.pindex2 = 1
		else:
			if self.pindex2 == 1:
				self.prepage2.Enable(False)
#end

# MyFrame.__do_layout
	def __do_layout(self):
		sizer_1 = wx.BoxSizer(wx.VERTICAL)
		sizer_2 = wx.BoxSizer(wx.VERTICAL)
		sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_4 = wx.BoxSizer(wx.VERTICAL)
		sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_7 = wx.BoxSizer(wx.VERTICAL)
		sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_9 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_10 = wx.BoxSizer(wx.VERTICAL)
		sizer_11 = wx.BoxSizer(wx.VERTICAL)
		sizer_12 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_13 = wx.BoxSizer(wx.VERTICAL)
		sizer_14 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_15 = wx.BoxSizer(wx.VERTICAL)
		sizer_16 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_18 = wx.BoxSizer(wx.VERTICAL)
		sizer_19 = wx.BoxSizer(wx.VERTICAL)
		grid_sizer_2 = wx.GridSizer(1, 3, 0, 0)
		gb1=wx.FlexGridSizer(1,6)
		gb2=wx.FlexGridSizer(1,6)
		gb3=wx.FlexGridSizer(1,6)
#		gb4=wx.FlexGridSizer(1,5)
		sizer_3.Add(self.BButton,1, wx.EXPAND|wx.RIGHT, 32)
		sizer_5.Add(self.name, 1, wx.EXPAND|wx.LEFT, 30)
		sizer_5.Add(self.NAtext, 2, wx.EXPAND, 0)
		sizer_4.Add(sizer_5, 1, wx.EXPAND|wx.LEFT|wx.RIGHT, 20)
		sizer_6.Add(self.ID, 1, wx.EXPAND|wx.LEFT, 30)
		sizer_6.Add(self.IDtext, 2, wx.EXPAND, 0)
		sizer_4.Add(sizer_6, 1, wx.EXPAND|wx.LEFT|wx.RIGHT, 20)
		sizer_3.Add(sizer_4, 3, wx.EXPAND, 0)
		sizer_3.Add(self.OButton, 1, wx.EXPAND|wx.LEFT, 36)
		sizer_2.Add(sizer_3, 1, wx.EXPAND, 0)
		sizer_7.Add(self.newstree, 1, wx.EXPAND, 0)
		gb1.Add(self.prepage, 0, 0)
		gb1.Add(self.lblPageIndex, 0, 1)
		gb1.Add(self.pt, 0, 2)
		gb1.Add(self.lblPageCount, 0, 3)
		gb1.Add(self.nextpage, 0, 4)
		sizer_7.Add(gb1, 0, wx.ALIGN_CENTER, 0)
		sizer_7.Add(self.newstree2, 1, wx.EXPAND, 0)
		gb2.Add(self.prepage2, 0, 0)
		gb2.Add(self.lblPageIndex2, 0, 1)
		gb2.Add(self.pt2, 0, 2)
		gb2.Add(self.lblPageCount2, 0, 3)
		gb2.Add(self.nextpage2, 0, 4)
		sizer_7.Add(gb2, 0, wx.ALIGN_CENTER, 0)
		sizer_8.Add(sizer_7, 1, wx.EXPAND, 0)
		sizer_18.Add(self.newstree1, 1, wx.EXPAND, 0)
		gb3.Add(self.prepage1, 0, 0)
		gb3.Add(self.lblPageIndex1, 0, 1)
		gb3.Add(self.pt1, 0, 2)
		gb3.Add(self.lblPageCount1, 0, 3)
		gb3.Add(self.nextpage1, 0, 4)
		gb3.Add(self.Facselect, 0, 5)
		sizer_18.Add(gb3, 0, wx.ALIGN_CENTER, 0)
		sizer_18.Add(self.UndefineButton, 1, wx.EXPAND|wx.LEFT, 25)
#		gb4.Add(self.prepage3, 0, 0)
#		gb4.Add(self.lblPageIndex3, 0, 1)
#		gb4.Add(self.pt3, 0, 2)
#		gb4.Add(self.lblPageCount3, 0, 3)
#		gb4.Add(self.nextpage3, 0, 4)
		sizer_18.Add(self.process, 0, wx.ALIGN_CENTER, 0)
		sizer_8.Add(sizer_18, 1, wx.EXPAND, 0)
		sizer_2.Add(sizer_8, 8, wx.EXPAND, 0)
		self.notebook_1_pane_1.SetSizer(sizer_2)
		sizer_9.Add(self.BButton2, 1, wx.EXPAND|wx.RIGHT, 32)
		sizer_9.Add(self.text, 2, wx.EXPAND, 0)
		sizer_9.Add(self.MECtrl, 1, wx.EXPAND|wx.TOP, 10)
		sizer_9.Add(self.semester, 1, wx.EXPAND|wx.TOP|wx.BOTTOM|wx.RIGHT, 15)	
		sizer_15.Add(sizer_9, 1, wx.EXPAND, 0)
		sizer_15.Add(self.courselist, 4, wx.ALL^wx.TOP|wx.EXPAND, 20)
		sizer_15.Add(self.coursetable, 4, wx.LEFT|wx.RIGHT|wx.EXPAND, 20)
		self.notebook_1_pane_2.SetSizer(sizer_15)
		grid_sizer_2.Add(self.BButton3, 1, wx.EXPAND|wx.RIGHT, 3)
		grid_sizer_2.Add(self.AddFrd, 1, wx.EXPAND|wx.RIGHT, 2)
		sizer_12.Add(self.searchCtrl, 2, wx.EXPAND|wx.TOP|wx.BOTTOM, 15)
		sizer_12.Add(self.searchicon, 1, wx.EXPAND|wx.TOP|wx.BOTTOM, 10)
		grid_sizer_2.Add(sizer_12, 1, wx.EXPAND, 0)
		sizer_11.Add(grid_sizer_2, 1, wx.EXPAND, 0)
		sizer_11.Add(self.lc, 7, wx.EXPAND, 0)
		sizer_16.Add(self.TXtext, 1, wx.ALIGN_CENTER, 0)
		sizer_16.Add(self.TXButton, 1, wx.EXPAND|wx.LEFT|wx.RIGHT, 15)
		sizer_11.Add(sizer_16, 1,wx.EXPAND|wx.ALL, 10)
		self.window_1_pane_1.SetSizer(sizer_11)
		sizer_14.Add(self.TJtext, 2, wx.EXPAND|wx.LEFT|wx.TOP, 12)
		sizer_14.Add(self.Refreshdata, 1, wx.EXPAND|wx.LEFT, 5)
		sizer_13.Add(sizer_14, 1, wx.EXPAND, 0)
		sizer_13.Add(self.tree, 7, wx.EXPAND, 0)
		sizer_13.Add(self.display, 1, wx.EXPAND, 0)
		self.window_1_pane_2.SetSizer(sizer_13)
		self.window_1.SplitVertically(self.window_1_pane_1, self.window_1_pane_2)
		sizer_10.Add(self.window_1, 14, wx.EXPAND, 0)
		self.notebook_1_pane_3.SetSizer(sizer_10)
		self.notebook_1.AddPage(self.notebook_1_pane_1, u"个人主页")
		self.notebook_1.AddPage(self.notebook_1_pane_2, u"课程信息")
		self.notebook_1.AddPage(self.notebook_1_pane_3, u"我的好友")
		sizer_1.Add(self.notebook_1, 1, wx.EXPAND, 4)
		self.SetSizer(sizer_1)
#		sizer_1.Fit(self)
		self.Layout()
# end of MyFrame.__do_layout

#trigger event:exit this application
	def OnExit(self, event):
		reactor.stop()
#end

#trigger event:open the optionframe
	def OnOption(self, event):
		self.flag3 += 1
		if self.flag3 ==1 or self.op.Show():
			self.op.Show()
		else:
			self.op.Hide()
			self.flag3 = 0
#end

#trigger event:according to the quantity of news to set page number and respond to action of turnning page		
	def PPage(self, event):
		self.nextpage.Enable(True)
		self.pindex = self.pindex-1
		self.newstree.CollapseAndReset(self.xk0)
		if self.pindex == 1:
			self.lblPageIndex.SetLabel(str(self.pindex))
			self.prepage.Enable(False)
			self.protocol.get10News(str(self.pindex-1),"15")
		else:
			self.lblPageIndex.SetLabel(str(self.pindex))
			self.prepage.Enable(True)
			self.protocol.get10News(str(self.pindex-1),"15")

	def NPage(self, event):
		self.prepage.Enable(True)
		self.pindex = self.pindex+1
		self.newstree.CollapseAndReset(self.xk0)
		if self.pindex == self.pcount:
			self.lblPageIndex.SetLabel(str(self.pindex))
			self.nextpage.Enable(False)
			self.protocol.get10News(str(self.pindex-1),"15")
		else:
			self.lblPageIndex.SetLabel(str(self.pindex))
			self.nextpage.Enable(True)
			self.protocol.get10News(str(self.pindex-1),"15")

	def PPage1(self, event):
		self.nextpage1.Enable(True)
		self.pindex1 = self.pindex1-1
		self.newstree1.CollapseAndReset(self.fac0)
		if self.pindex1 == 1:
			self.lblPageIndex1.SetLabel(str(self.pindex1))
			self.prepage1.Enable(False)
			self.protocol.get10News(str(self.pindex1-1),str(self.Facselect.GetSelection()+1))
#			temp = self.newstree1.AppendItem(self.fac0,'Linux')
#			self.newstree1.SetItemText(temp,'2',1)
		else:
			self.lblPageIndex1.SetLabel(str(self.pindex1))
			self.prepage1.Enable(True)
			self.protocol.get10News(str(self.pindex1-1),str(self.Facselect.GetSelection()+1))

	def NPage1(self, event):
		self.prepage1.Enable(True)
		self.pindex1 = self.pindex1+1
		self.newstree1.CollapseAndReset(self.fac0)
		if self.pindex1 == self.pcount1:
			self.lblPageIndex1.SetLabel(str(self.pindex1))
			self.nextpage1.Enable(False)
			self.protocol.get10News(str(self.pindex1-1),str(self.Facselect.GetSelection()+1))
		else:
			self.lblPageIndex1.SetLabel(str(self.pindex1))
			self.nextpage1.Enable(True)
			self.protocol.get10News(str(self.pindex1-1),str(self.Facselect.GetSelection()+1))

	def PPage2(self, event):
		self.nextpage2.Enable(True)
		self.pindex2 = self.pindex2-1
		self.newstree2.CollapseAndReset(self.jwc0)
		if self.pindex2 == 1:
			self.lblPageIndex2.SetLabel(str(self.pindex2))
			self.prepage2.Enable(False)
			self.protocol.get10News("0","16")
#			self.newstree2.SetItemText(temp,'3',1)
		else:
			self.lblPageIndex2.SetLabel(str(self.pindex2))
			self.prepage2.Enable(True)
			self.protocol.get10News(str(self.pindex2-1),"16")

	def NPage2(self, event):
		self.prepage2.Enable(True)
		self.pindex2 = self.pindex2+1
		self.newstree2.CollapseAndReset(self.jwc0)
		if self.pindex2 == self.pcount2:
			self.lblPageIndex2.SetLabel(str(self.pindex2))
			self.nextpage2.Enable(False)
			self.protocol.get10News(str(self.pindex2-1),"16")
		else:
			self.lblPageIndex2.SetLabel(str(self.pindex2))
			self.nextpage2.Enable(True)
#			self.newstree2.CollapseAndReset(self.jwc0)
			self.protocol.get10News(str(self.pindex2-1),"16")
#end			

#function:insert friend information into friends list
	def insertOneFri(self,element):
		if self.lc.FindItem(-1,element[0],partial=False)==-1:
			self.lc.InsertStringItem(self.num_items, element[0])
			self.lc.SetStringItem(self.num_items, 1, element[1])
			self.lc.SetStringItem(self.num_items, 2, element[2])
			self.lc.SetStringItem(self.num_items, 3, element[3])
			self.num_items=self.num_items+1
#end

#function:reminder of fresh news
	def Ontips(self):
		tip = TipFrame(None,-1,'TIPS')
		tip.Show()
#end

#trigger event:according to news caption to show news content in a new frame
	def OnChanged(self, event):
		item = event.GetItem()
		partitem = self.newstree.GetItemParent(item)
		part=self.newstree.GetItemText(partitem, 1)
		if part == '1':
			if self.newstree.ItemHasChildren(item):
				event.Skip()
			else:
				if self.newstree.GetItemText(partitem) == '1':
					event.Skip()
				else:
					self.newstree.SetItemBackgroundColour(item,'orange')
					self.protocol.getNewsContent(str(self.newstree.GetItemText(item,1)),"15")
					self.cf = ChildFrame(None,-1,"系统新闻")
					self.cf.ShowModal()
		elif part == '2':
			if self.newstree1.ItemHasChildren(item):
				event.Skip()
			else:
				if self.newstree1.GetItemText(partitem) == '1':
					event.Skip()
				else:
					self.newstree1.SetItemBackgroundColour(item,'orange')
					self.protocol.sendLine("getnewscontent|||"+str(self.newstree1.GetItemText(item,1))+"|||"+str(self.Facselect.GetSelection()+1))
					self.cf = ChildFrame(None,-1,"系统新闻")
					self.cf.ShowModal()
		elif part == '3':
			if self.newstree2.ItemHasChildren(item):
				event.Skip()
			else:
				if self.newstree2.GetItemText(partitem) == '1':
					event.Skip()
				else:
					self.newstree2.SetItemBackgroundColour(item,'orange')
					self.protocol.getNewsContent(str(self.newstree2.GetItemText(item,1)),"16")
					self.cf = ChildFrame(None,-1,"系统新闻")
					self.cf.ShowModal()
		else:
			event.Skip()
#end

#trigger event:according to friend's name to find the friend in friends list
	def goSearch(self,event):
		num = self.lc.GetItemCount()
		if num == 0:
			self.frstatusbar.SetStatusText("There is no friend yet.")
		else:
			for i in range(0,num):
				self.lc.SetItemBackgroundColour(i,self.lc.GetBackgroundColour())
				if self.lc.GetItem(i,2).Text == self.searchCtrl.GetValue():#通过姓名检索 
					self.lc.SetItemBackgroundColour(i,"orange")
				else:
					self.frstatusbar.SetStatusText("No Matching!!!")
#end

#trigger event:according to faculty name to display corresponding faculty news                    
	def FacChange(self,event):
		self.newstree1.CollapseAndReset(self.fac0)
		self.protocol.sendLine("getnewspage|||"+str(self.Facselect.GetSelection()+1))
		event.Skip()
#end

#trigger event:based on semester to display user's course information
	def OnView(self,event):
		self.frstatusbar.SetStatusText(self.semester.GetValue())
		self.protocol.getCourse(self.semester.GetValue())
		event.Skip()
#end

#function:based on friend's name to find the friend in the friends list
	def Search(self,name):
		num = self.lc.GetItemCount()
		for i in range(0,num):
			self.lc.SetItemBackgroundColour(i,self.lc.GetBackgroundColour())
			if self.lc.GetItem(i,2).Text == name:#通过姓名检索 
				self.lc.SetItemBackgroundColour(i,"orange")
				return True
			else:
				self.frstatusbar.SetStatusText("No Matching!!!")
				return False
#end

#trigger event:add new friend                
	def AddFriend(self,event):
		dlg = wx.TextEntryDialog(self, '好友姓名：','添加好友')
		if dlg.ShowModal() == wx.ID_OK:
			value=dlg.GetValue()
			if value==self.protocol.name:
				dlg2 = wx.MessageDialog(self, '不能添加自己为好友！', 'Warnning', wx.OK|wx.ICON_ERROR)
				dlg2.ShowModal()
				dlg2.Destroy()
			elif self.Search(value)==True:
				dlg2 = wx.MessageDialog(self, value+"已经是您的好友!", 'Warnning', wx.OK|wx.ICON_ERROR)
				dlg2.ShowModal()
				dlg2.Destroy()
			else:
    #hjk
				self.protocol.searchFriendbyname(value)
    #end
		else:
			print "Cancel"
		dlg.Destroy()
#end

#error trigger event:show the error occurs in the process of the application
	def showmsg(self,msg):
		dlg=wx.MessageDialog(self, msg, 'Warnning', wx.OK|wx.ICON_ERROR)
		dlg.ShowModal()
		dlg.Destroy()
#end

#function:search and add friend
	def Friendchoice(self):
		self.dlg = MyDialog(self,-1,"查找")
		if self.dlg.ShowModal() == wx.ID_OK:
			index = self.dlg.ls.GetFocusedItem()
#			num_items = self.lc.GetItemCount()
#			self.lc.InsertStringItem(num_items,self.sins[index][0])
#			self.lc.SetStringItem(num_items,1,self.sins[index][1])
#			self.lc.SetStringItem(num_items,2,self.sins[index][2])
			self.protocol.addFriend(self.dlg.ls.GetItem(index,3).GetText())
		else:
			print 'Cancel'
		self.dlg.Destroy()
#end

#trigger event:refresh the list of courses
	def Refresh(self,event):
		event.Skip()
#end

#trigger event:show the statistic information of all user friend's courses        
	def OnSelChanged(self, event):
		self.display.DeleteAllItems()
		item = event.GetItem()
		num_item =  self.display.GetItemCount()
		self.display.InsertStringItem(num_item, self.tree.GetItemText(item))
		self.display.SetStringItem(num_item, 1, self.authors[1])
		self.display.SetStringItem(num_item, 2, '24%')
#end

#mouse right click trigger event:create the menu including delete friend and browse friend's course information
	def OnContextMenu(self, event):
		self.item = event.GetIndex()
		if self.lc.GetItem(self.item,0).Text =='':
			event.Skip()
		else:
			self.protocol.getFriendTerm(self.lc.GetItem(self.item,0).Text)
			if not hasattr(self, "popupStop"):
				self.popupRemove = wx.NewId()
				self.Bind(wx.EVT_MENU, self.OnRemove, id = self.popupRemove)
			menu = wx.Menu()
			itemRemove = wx.MenuItem(menu, self.popupRemove, u"删除好友")
			menu.AppendItem(itemRemove)
			self.submenu = wx.Menu()
			menu.AppendMenu(101, u"查看课程", self.submenu)
#			self.Bind(wx.EVT_MENU_HIGHLIGHT, self.OnAddItem, id = 101)
			if self.lc.GetFirstSelected()==-1:
				itemRemove.Enable(False)
				menu.Enable(101,False)
			else:
				itemRemove.Enable(True)
				menu.Enable(101,True)
			self.PopupMenu(menu)
			menu.Destroy()
#end

#menu trigger event:respond to menu choice of delete friend
	def OnRemove(self, event):
		dlg = wx.MessageDialog(None,"Do you really want to delete this friend?",'A message Box',wx.YES_NO|wx.ICON_QUESTION)
		retCode = dlg.ShowModal()
		if (retCode == wx.ID_YES):
#			print self.text[0]
			#选中行
			self.protocol.deleteFriend(self.lc.GetItem(self.item,0).Text)
			self.lc.DeleteItem(self.item)
		else:
			pass
#end

#menu trigger event:respond to menu choice of browse friend's course information classified by semester
	def OnAddItem(self, event):#动态添加学期选项
		for i in range(0,3):
			item = self.submenu.Append(i, '选择学期',kind=wx.ITEM_RADIO)# 添加菜单项
			self.Bind(wx.EVT_MENU, self.OnBrowse, item)# 绑定一个菜单事件
	def AddMenu(self,men):
		item = self.submenu.Append(int(men), men,kind=wx.ITEM_RADIO)# 添加菜单项
		self.Bind(wx.EVT_MENU, self.OnBrowse, item)# 绑定一个菜单事件
#end

#trigger event:show friend's course information			
	def OnBrowse(self, event):
#		if event.GetId() == 0:
#			pass
#			fc = FriendCourse(self, -1, "2009年课程")
#			fc.ShowModal()
#			fc.Destroy()
#		elif event.GetId() == 1:
#			fc = FriendCourse(self, -1, "2010年课程")
#			fc.ShowModal()
#			fc.Destroy()
#		else :
#			fc = FriendCourse(self, -1, "2011年课程")
#			fc.ShowModal()
#			fc.Destroy()
#		else:
		id=event.GetId()
		name=self.lc.GetItem(self.item,2).Text
		number=self.lc.GetItem(self.item,0).Text
		self.fc=FriendCourse(self,-1,name+str(id)+"学期的课表")
		self.protocol.getFriendCourse(number,str(id))
		self.fc.ShowModal()
		self.fc.Destroy()
#end    

#trigger event:friend application and reminder
	def OnRemind(self,event):
		if self.count != 0:
			msg=self.protocol.msg[self.count-1]
			if msg[4]=="4":
				info=msg[0]+"级"+msg[1]+"专业的"+msg[2]+"想添加你为好友。"
				dlg1 = ApplyDialog(self, -1, u"提醒", info)
				returncode=dlg1.ShowModal()
				if(returncode==wx.ID_OK):
					self.protocol.sendresponsefriend(msg[3],"2")
				else:
					self.protocol.sendresponsefriend(msg[3],"1")
			if msg[4]=="2":
				info=msg[0]+"级"+msg[1]+"专业的"+msg[2]+"同意了你的请求。"
				dlg1=wx.MessageDialog(None,info,u'提示',wx.OK|wx.ICON_INFORMATION)
				dlg1.ShowModal()
			if msg[4]=="1":
				info=msg[0]+"级"+msg[1]+"专业的"+msg[2]+"拒绝了你的请求。"
				dlg1=wx.MessageDialog(None,info,u'提示',wx.OK|wx.ICON_INFORMATION)
				dlg1.ShowModal()
			self.protocol.msg.pop(self.count-1)
			self.count = self.count-1
			self.TXButton.SetLabel(str(self.count))
			dlg1.Destroy()
		else:
			dlg2 = wx.MessageDialog(self, '暂时没有好友申请需要处理', u"提醒", wx.OK|wx.ICON_INFORMATION)
			dlg2.ShowModal()
			dlg2.Destroy()						

#trigger event:minimize the user interface
	def Iconify(self,event):
		self.Show(False)
		event.Skip()
#end

#trigger event:exit this application
	def OnCloseWindow(self,event):
#		self.taskBarIcon.Destroy()
#		self.re.Destroy()
#		self.Destroy()
		reactor.stop()
#end
#end class MyFrame
