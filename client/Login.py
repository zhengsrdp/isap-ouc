# -*- coding: utf-8 -*-
'''generated by Luji Cui on 2011.11.10;
function:the login window'''

import wx,time
import base64
# written by huangjiakun
import sys
from twisted.internet import wxreactor
wxreactor.install()
# Monkey-patch the wxreactor to make it exit correctly.
if wxreactor.WxReactor.callFromThread is not None:
	oldStop = wxreactor.WxReactor.stop
	def stopFromThread(self):
		self.callFromThread(oldStop, self)
	wxreactor.WxReactor.stop = stopFromThread
import isapoucclient
from twisted.internet import reactor,defer
from twisted.python import log
from option.OptionModule import OptionFrame
from user.UserModule import MyFrame
from Wait import WaitFrame
#end

class LoginFrame(wx.Frame):
	def __init__(self,parent,id):
#import user's login information from local file 'myconfig' 
		self.protocol = None
		self.username = ''
		self.password = ''
		self.state= False
		self.cfg = wx.Config('myconfig')
		if self.cfg.Exists('ID'):
			self.username, self.password, self.state = self.cfg.Read('ID'), base64.b64decode(self.cfg.Read('PSW')), self.cfg.ReadBool('state')
		else:
			self.username = ''
			self.password = ''
			self.state = False
#end
		wx.Frame.__init__(self,parent,id,'Login',size=(340,500),style=wx.DEFAULT_FRAME_STYLE ^ (wx.RESIZE_BORDER))
		panel = wx.Panel(self,-1)
		self.Bind(wx.EVT_CLOSE,self.OnCloseWindow)

		self.createButtonBar(panel)
		self.createTextFields(panel)
		self.rp = wx.CheckBox(panel,1,'Remember Password',(50,340))
		self.rp.SetValue(self.state)

		self.Bind(wx.EVT_TEXT,self.UserChange,self.UserName)
		self.Bind(wx.EVT_CHECKBOX,self.RePassword,id=1)

		self.picture = wx.StaticBitmap(panel,pos=(110,25),size=(200,200))
		self.picture.SetFocus()
		self.picture.SetBitmap(wx.Bitmap("ouc.png"))
		self.Center()

#function:create 'Login' and 'Exit' button
	def buttonData(self):
		return (("Login",self.OnLogin),
			("Exit",self.OnCloseWindow))

	def createButtonBar(self,panel,yPos=400):
		xPos = 80
		for eachLabel,eachHandler in self.buttonData():
			pos = (xPos,yPos)
			button = self.buildOneButton(panel,eachLabel,eachHandler,pos)
			xPos += button.GetSize().width
#end

#function:set the 'Login' button as default one
	def buildOneButton(self,parent,label,handler,pos=(0,0)):
		button = wx.Button(parent,-1,label,pos)
		if label == "Login":
			button.SetDefault()
		self.Bind(wx.EVT_BUTTON,handler,button)
		return button
#end

#function:create 'ID' and 'Password' statictext and textctrl
	def textFieldData(self):
		return (("Student ID:",(50,200)),
			("Password:",(50,270)))
	
	def createTextFields(self,panel):
		for eachLabel,eachPos in self.textFieldData():
			self.createCaptionedText(panel,eachLabel,eachPos)

	def createCaptionedText(self,panel,label,pos):
		static = wx.StaticText(panel,wx.NewId(),label,pos)
		static.SetBackgroundColour("White")
		textPos = (pos[0],pos[1]+20)
		if label == "Student ID:":
			self.UserName = wx.TextCtrl(panel,wx.NewId(),str(self.username),size=(240,-1),pos=textPos,style=wx.TE_PROCESS_ENTER)
		else:
			self.Password = wx.TextCtrl(panel,wx.NewId(),str(self.password),size=(240,-1),pos=textPos,style=wx.TE_PASSWORD)
#end

#trigger event:set the username form as number only allowed and judge the username whether already exists or not
	def UserChange(self,event):
		self.Password.Clear()
		self.rp.SetValue(False)
		input = self.UserName.GetRange(self.UserName.GetInsertionPoint(),self.UserName.GetInsertionPoint()+1)
		if input == '':
			pass
		elif ord(input)<48 or ord(input)>57:
			self.UserName.Remove(self.UserName.GetInsertionPoint(),self.UserName.GetInsertionPoint()+1)
			self.UserName.SetInsertionPoint(self.UserName.GetInsertionPoint()-1)
		elif self.UserName.GetValue() == self.username:
			self.Password.SetValue(self.password)
#end

#trigger event:the login function to connect the sever when you push the 'Login' button
	def OnLogin(self,event):		
		if not (self.UserName.GetValue() and self.Password.GetValue()):
			dlg = wx.MessageDialog(self, 'Username or Password can not be None!', 'Warnning', wx.OK|wx.ICON_ERROR)
			dlg.ShowModal()
			dlg.Destroy()
		#打开端口，开始登录
#		reactor.connectTCP("localhost", 10000,factory)
		reactor.connectTCP("222.195.149.48", 10000,factory)
		self.TurntoWait()
#此处感觉不对,hjk
#end

#function:the messagedialog to remind user an error occurs when user logs in
	def LoginError(self,reason):
		dlg=wx.MessageDialog(self,reason,'Warnning',wx.OK|wx.ICON_ERROR)
		dlg.ShowModal()
		dlg.Destroy()
#end

#function:show waiting animation after log in successfully
	def TurntoWait(self):
		self.waitdlg=WaitFrame(self,-1,"connecting...")
		self.Hide()
		self.waitdlg.Show()
#end
	
#function:show optionframe when user use this application first time
	def TurntoOP(self):
		op = OptionFrame(self.protocol)
		self.protocol.factory.opgui=op
		op.Show()
		self.Destroy()
#end

#function:show userframe 
	def TurntoUf(self):
		uf=MyFrame(None,-1,self.protocol)
		self.protocol.factory.ufgui=uf
		self.protocol.initPage()
		uf.Show()   
		uf.CenterOnScreen()	
		self.Destroy()	
#end

#trigger event:close the login frame
	def OnCloseWindow(self,event):
#		self.Destroy()
		reactor.stop()
#end
	
#trigger event:save user's information at local file 'myconfig'    
	def RePassword(self, event):
		if self.rp.GetValue():
			self.cfg.Write('ID', self.UserName.GetValue())
			encoded = base64.b64encode(self.Password.GetValue())
			self.cfg.Write('PSW', encoded)
			self.cfg.WriteBool('state',True)
		else:
			self.cfg.Write('ID', '')
			self.cfg.Write('PSW', '')
			self.cfg.WriteBool('state',False)
#end

if __name__ == '__main__':
	app = wx.App(False)
	frame = LoginFrame(parent=None,id=-1)
	frame.Show(True)
	reactor.registerWxApp(app)
	factory=isapoucclient.FactoryofClient(frame)
	reactor.run(installSignalHandlers=False)
