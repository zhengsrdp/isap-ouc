#!/usr/bin/python
# -*- coding: utf-8 -*-
'''generated by CuiLuji on 2012.03.29'''
import wx
from twisted.internet import wxreactor
wxreactor.install()
from twisted.internet import reactor,defer,threads
from isapoucserver import graballCourses,updateCourse,updateScore,IsapoucFactory

class ServerTaskBar(wx.TaskBarIcon):
	ID_Bar = wx.NewId()
	def __init__(self, frame):
		wx.TaskBarIcon.__init__(self)

		self.frame = frame
		self.SetIcon(wx.Icon('Server.png', wx.BITMAP_TYPE_PNG), 'ServerTaskBar')
		self.Bind(wx.EVT_TASKBAR_LEFT_DOWN, self.MouseLD)
		self.Bind(wx.EVT_TASKBAR_RIGHT_DOWN, self.MouseRD)

	def MouseLD(self, event):
		if self.frame.IsIconized() or not self.frame.IsShown():
			self.frame.Iconize(False)
			self.frame.Raise()
		else:
			self.frame.Show(False)

	def MouseRD(self, event):
		if not hasattr(self, "popupID1"):
			self.popupID1 = wx.NewId()
		self.Bind(wx.EVT_MENU, self.Popup, id = self.popupID1)
		menu = wx.Menu()
		menu.Append(self.popupID1, "退出")
		self.PopupMenu(menu)
		menu.Destroy()
		
	def Popup(self, event):
		dlg = wx.MessageDialog(None,'Do you want to exit the Application?','Information',wx.YES_NO|wx.ICON_QUESTION)
		ret = dlg.ShowModal()
		if ret == wx.ID_YES:
			self.RemoveIcon()
			self.frame.Destroy()
		else:
			pass
		dlg.Destroy()

class ServerFrame(wx.Frame):
	def __init__(self, parent, id, title):
		wx.Frame.__init__(self, parent, id, title,size=(600,400))
		self.Bind(wx.EVT_CLOSE,self.Exit)
		self.TaskBar = ServerTaskBar(self)
		self.Statusbar = self.CreateStatusBar(1)
		hsizer1 = wx.BoxSizer(wx.HORIZONTAL)
		hsizer2 = wx.BoxSizer(wx.HORIZONTAL)
		hsizer3 = wx.BoxSizer(wx.HORIZONTAL)
		hsizer4 = wx.BoxSizer(wx.HORIZONTAL)
		vsizer = wx.BoxSizer(wx.VERTICAL)
		vsizer1 = wx.BoxSizer(wx.VERTICAL)
		vsizer2 = wx.BoxSizer(wx.VERTICAL)
		vsizer3 = wx.BoxSizer(wx.VERTICAL)
		vsizer4 = wx.BoxSizer(wx.VERTICAL)
		self.Bn1 = wx.Button(self, 1, '抓取课程')
		self.Bn2 = wx.Button(self, 2, '抓取成绩')
		self.Bn3 = wx.Button(self, 3, '抓取课程')
		self.Bn4 = wx.Button(self, 4, 'EXIT',size=(100,30))
		self.Stext1 = wx.StaticText(self, -1, '学号')
		self.Stext2 = wx.StaticText(self, -1, '密码')
		self.Stext3 = wx.StaticText(self, -1, '学期')
		self.Tctrl1 = wx.TextCtrl(self, -1,style=wx.TE_PROCESS_TAB)
		self.Tctrl2 = wx.TextCtrl(self, -1,style=wx.TE_PROCESS_TAB|wx.TE_PASSWORD)
		self.Tctrl3 = wx.TextCtrl(self, -1)
		self.Stext4=wx.StaticBox(self, -1, '选课之前',size=(240, 300))
		self.Stext4.SetFont(wx.Font(16, wx.ROMAN, wx.NORMAL,wx.NORMAL, 0))
		self.Stext5=wx.StaticBox(self, -1, '成绩公布',size=(100, 150))
		self.Stext5.SetFont(wx.Font(16, wx.ROMAN, wx.NORMAL,wx.NORMAL, 0))
		self.Stext6=wx.StaticBox(self, -1, '选课之后',size=(100, 150))
		self.Stext6.SetFont(wx.Font(16, wx.ROMAN, wx.NORMAL,wx.NORMAL, 0))
		vsizer1.Add(self.Stext4, 1, wx.EXPAND|wx.LEFT, 5)
		hsizer1.Add(self.Stext1, 1, wx.ALIGN_CENTER|wx.LEFT, 30)
		hsizer1.Add(self.Tctrl1, 3, wx.EXPAND|wx.TOP|wx.BOTTOM|wx.RIGHT, 20)
		hsizer2.Add(self.Stext2, 1, wx.ALIGN_CENTER|wx.LEFT, 30)
		hsizer2.Add(self.Tctrl2, 3, wx.EXPAND|wx.TOP|wx.BOTTOM|wx.RIGHT, 20)
		hsizer3.Add(self.Stext3, 1, wx.ALIGN_CENTER|wx.LEFT, 30)
		hsizer3.Add(self.Tctrl3, 2, wx.EXPAND|wx.TOP|wx.BOTTOM|wx.RIGHT, 20)
		hsizer3.Add(self.Bn1, 2, wx.EXPAND|wx.ALL, 5)
		vsizer1.Add(hsizer1, 1, wx.EXPAND, 0)
		vsizer1.Add(hsizer2, 1, wx.EXPAND, 0)
		vsizer1.Add(hsizer3, 1, wx.EXPAND, 0)
		vsizer2.Add(self.Stext5, 1, wx.EXPAND, 0)
		vsizer2.Add(self.Bn2, 1, wx.EXPAND|wx.ALL, 5)
		vsizer2.Add(self.Stext6, 1, wx.EXPAND, 0)
		vsizer2.Add(self.Bn3, 1, wx.EXPAND|wx.ALL, 5)
		hsizer4.Add(vsizer1, 2, wx.EXPAND, 0)
		hsizer4.Add(vsizer2, 1, wx.EXPAND, 0)
		vsizer.Add(hsizer4, 4, wx.EXPAND, 0)
		vsizer.Add(self.Bn4, 1, wx.ALIGN_CENTER|wx.ALL, 5)
		
		self.Bind(wx.EVT_BUTTON, self.Curlm1, id=1)
		self.Bind(wx.EVT_BUTTON, self.Grade, id=2)
		self.Bind(wx.EVT_BUTTON, self.Curlm2, id=3)
		self.Bind(wx.EVT_BUTTON, self.Exit, id=4)
		self.SetSizer(vsizer)
		self.Center()

	def Curlm1(self, event):
		threads.deferToThread(graballCourses, self.Tctrl1.GetValue(), self.Tctrl2.GetValue(), self.Tctrl3.GetValue())
		self.Statusbar.SetStatusText('选课前获取课程')
		event.Skip()

	def Grade(self, event):
		threads.deferToThread(updateScore,"20112")
		self.Statusbar.SetStatusText('获取成绩')
		event.Skip()

	def Curlm2(self, event):
		threads.deferToThread(updateCourse,"20112")
		self.Statusbar.SetStatusText('选课后获取课程')
		event.Skip()

	def Exit(self, event):
		self.TaskBar.Destroy()
		self.Destroy()
		reactor.stop()
		

if __name__ == "__main__":
	app = wx.PySimpleApp()
	frame = ServerFrame(None, -1, 'Server')
	frame.Show(True)	
	reactor.registerWxApp(app)
	factory=IsapoucFactory(frame)
	reactor.listenTCP(10000,factory)
	reactor.run()
